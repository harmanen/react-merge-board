.main {
  display: flex;
  align-items: flex-start;
  justify-content: center;
}

.contentContainer {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  height: fit-content;
  padding: 0 var(--layout-padding);
  background-color: #252422;
  min-height: 100vh;
}

.infoContainer,
.gridContainer {
  width: 100%;
  background-color: #FFFFFF;
  border-radius: 1rem;
}

.infoContainer {
  height: calc(100vh / 5 - 3 * var(--layout-padding)); 
  margin: var(--layout-padding) 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2rem;
  text-align: center;
  padding: var(--layout-padding);
  font-size: var(--item-tier-font-size)
}

.gridContainer {
  /* Leave this as a reminder of the idea that grid would take */
  /* 4 / 5 of the vh. Instead, define infoContainer and rest is dynamic */
  /* height: calc((100vh / 5) * 4); */
  margin-bottom: var(--layout-padding);
  padding: var(--layout-padding);
  display: flex;
  justify-content: center;
}

.grid-item-container {
  aspect-ratio: 1 / 1;
}

.gridItemDark,
.gridItemLight {
  aspect-ratio: 1 / 1;
}

.gridItemDark {
  background-color: #ACACAC;
}

.gridItemLight {
  background-color: #FFFFFF;
}